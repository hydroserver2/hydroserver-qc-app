name: HydroServer QC App LRO Demo Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Enter a deployment environment to use.'
        type: environment
        required: true
      branch:
        description: 'Branch to deploy'
        required: false
        default: 'main'

permissions:
  contents: write
  id-token: write
  actions: write

jobs:
  check-environment-variables:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    env:
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      AWS_IAM_ROLE: ${{ vars.AWS_IAM_ROLE }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      PROXY_BASE_URL: ${{ vars.PROXY_BASE_URL }}
    steps:
      - name: Check Required Environment Variables
        run: |
          echo "Checking required environment variables..."
          required_vars=(AWS_ACCOUNT_ID AWS_IAM_ROLE AWS_REGION PROXY_BASE_URL)
          for var in "${required_vars[@]}"; do
            if [ -z "${!var}" ]; then
              echo "Error: Environment variable $var is not defined."
              exit 1
            fi
          done

  deploy-hydroserver-data-mgmt-app:
    needs: 
      - check-environment-variables
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_IAM_ROLE }}
          role-session-name: create-hydroserver-resources
          aws-region: ${{ vars.AWS_REGION }}
      - name: Checkout Data Management App Repo
        uses: actions/checkout@v4
        with:
          repository: hydroserver2/hydroserver-qc-app
          ref: ${{ github.event.inputs.branch }}
          path: qc_app
      - name: Setup Node 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: npm
          cache-dependency-path: qc_app/package-lock.json
      - name: Install Dependencies
        working-directory: ./qc_app
        run: npm ci
      - name: Configure Environment Variables
        working-directory: ./qc_app
        run: |
          cat << EOF > .env
          VITE_APP_PROXY_BASE_URL=${{ vars.PROXY_BASE_URL }}
      - name: Build QC App
        working-directory: ./qc_app
        run: npm run build
      - name: Deploy to S3
        working-directory: ./qc_app
        run: |
          aws s3 sync ./dist s3://hydroserver-qc-app-${{ github.event.inputs.environment }}-${{ vars.AWS_ACCOUNT_ID }}/ --delete
      - name: Get CloudFront Distribution ID
        run: |
          DISTRIBUTION_IDS=$(aws cloudfront list-distributions --query "DistributionList.Items[*].Id" --output text)
          for ID in $DISTRIBUTION_IDS; do
            TAGS_JSON=$(aws cloudfront list-tags-for-resource --resource "arn:aws:cloudfront::${{ vars.AWS_ACCOUNT_ID }}:distribution/$ID")
            MATCHING_ID=$(echo "$TAGS_JSON" | jq -r '
              if any(.Tags.Items[]; .Key == "'"${{ vars.AWS_TAG_KEY || 'hydroserver-instance' }}"'" and .Value == "'"${{ vars.AWS_TAG_VALUE || github.event.inputs.environment }}"'") then "'$ID'" else empty end
            ')
            if [ -n "$MATCHING_ID" ]; then
              CLOUDFRONT_ID=$MATCHING_ID
              break
            fi
          done
          echo "CLOUDFRONT_ID=$CLOUDFRONT_ID" >> $GITHUB_ENV
      - name: Invalidate CloudFront Distribution Cache
        run: |
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"
